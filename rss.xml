<rss version="2.0">
  <channel>
    <title>Tomas Petricek's blog</title>
    <link>http://tomasp.net</link>
    <description>Writing about software development in F# and .NET, sharing materials from my F# trainings and talks, writing about programming language research and theory.</description>
    <item>
      <title>Solving fun puzzles with F#</title>
      <guid>http://tomasp.net/blog/2014/puzzling-fsharp</guid>
      <link>http://tomasp.net/blog/2014/puzzling-fsharp/index.html</link>
      <pubDate>Tue, 25 Mar 2014 14:27:08 GMT</pubDate>
      <description>&lt;p&gt;Do you need to convince your friends &amp;amp; family that programming can be fun? 
For the last Christmas, I got a puzzle as a gift. It is a number of small
cubes, joined together, that can be rotated and folded to form a bigger
(4x4x4) cube.&lt;/p&gt;

&lt;p&gt;We spent the last few days of the year with family and a couple of friends
and I left the puzzle on the table. Every time I walked around, someone was
playing with it without much success. In the end, I said that if noone solves
it until 31 December, I'll write a program to do it. Which I did between 7 PM
and 8 PM and, voilà, here is what I got...&lt;/p&gt;

&lt;div style="text-align:center;margin:10px"&gt;
&lt;a href="http://tomasp.net/blog/2014/puzzling-fsharp/puzzle.jpg" target="_blank"&gt;&lt;img src="http://tomasp.net/blog/2014/puzzling-fsharp/puzzle.jpg" style="height:200px;margin-right:20px;border-style:none" /&gt;&lt;/a&gt;
&lt;a href="http://tomasp.net/blog/2014/puzzling-fsharp/cube.jpg" target="_blank"&gt;&lt;img src="http://tomasp.net/blog/2014/puzzling-fsharp/cube.jpg" style="height:200px;margin-left:20px;border-style:none" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;So, how do you solve a puzzle in about 1 hour on New Year's eve?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advent Art: Generating Hokusai paintings</title>
      <guid>http://tomasp.net/blog/2014/japan-advent-art-en</guid>
      <link>http://tomasp.net/blog/2014/japan-advent-art-en/index.html</link>
      <pubDate>Tue, 21 Jan 2014 18:49:00 GMT</pubDate>
      <description>&lt;div id="myModal" class="reveal-modal xlarge" data-reveal&gt;
  &lt;iframe src="http://tomasp.net/blog/2014/japan-advent-art-en/hokusai.html" style="width:100%; height:850px;border-style:none;"&gt;&lt;/iframe&gt;
  &lt;a class="close-reveal-modal"&gt;&amp;#215;&lt;/a&gt;
&lt;/div&gt;

&lt;div class="rdecor" style="text-align:center"&gt;
&lt;a href="#" data-reveal-id="myModal" style="text-align:center"&gt;
&lt;img src="http://tomasp.net/blog/2014/japan-advent-art-en/hokusai_sm.jpg" style="margin-bottom:10px;border:4px solid black" title="The Great Wave off Kanagawa" /&gt;&lt;br /&gt;
&lt;small style="font-size:90%"&gt;Click here to see the result live!&lt;/small&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;For the last few years, the Japanese F# community has been running the F# Advent Calendar 
(&lt;a href="http://atnd.org/events/10685"&gt;2010&lt;/a&gt;, &lt;a href="http://partake.in/events/1c24993a-c475-4fc2-bca4-7a1cd2f81869"&gt;2011&lt;/a&gt;, &lt;a href="http://atnd.org/events/33927"&gt;2012&lt;/a&gt;). 
Each advent day, one person writes an article about something interesting in F#. I have 
been following the advent calendar last year on Twitter and when the planning started for 
this year, I offered to write an article too. You might have noticed that I posted a 
&lt;a href="http://tomasp.net/blog/2013/japan-advent-art/index.html"&gt;Japanse version of the article&lt;/a&gt;
in December as part of the &lt;a href="http://connpass.com/event/3935/"&gt;advent calendar 2013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A number of people helped to make this happen - &lt;a href="http://twitter.com/igeta"&gt;@igeta&lt;/a&gt; arranged everything and 
helped with reviewing, &lt;a href="http://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; translated the article and 
&lt;a href="http://twitter.com/gab_km"&gt;@gab_km&lt;/a&gt; reviewed the translation. Thanks!&lt;/p&gt;

&lt;p&gt;But what should I write about? It would be nice to look at some of the F# open-source libraries
and projects that have been developing over the last year in the F# community. At the same time,
can I relate the topic of the article to Japan? After some thinking, I came up with the following
plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, we'll use the &lt;a href="http://fsharp.github.io/FSharp.Data/"&gt;F# Data&lt;/a&gt; library and the &lt;a href="http://www.freebase.com"&gt;Freebase&lt;/a&gt; to learn
something about Japanese art. I should add that thanks to &lt;a href="https://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; the library now also has
a &lt;a href="http://fsharp.github.io/FSharp.Data/jp"&gt;documentation in Japanese&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we'll pick one art work and try to recreate it in F#. Given my artistic skills, this 
part will definitely fail, but we can try :-).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we'll use the &lt;a href="http://funscript.info"&gt;FunScript project&lt;/a&gt; to turn our F# code into
JavaScript, so that we can run it as a pure HTML web application that also works on mobile
phones and other devices.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Coeffects: The next big programming challenge</title>
      <guid>http://tomasp.net/blog/2014/why-coeffects-matter</guid>
      <link>http://tomasp.net/blog/2014/why-coeffects-matter/index.html</link>
      <pubDate>Wed, 08 Jan 2014 15:31:49 GMT</pubDate>
      <description>&lt;p&gt;Many advances in programming language design are driven by some practical motivations.
Sometimes, the practical motivations are easy to see - for example, when they come from
some external change such as the rise of multi-core processors. Sometimes, discovering 
the practical motivations is a tricky task - perhaps because everyone is used to a 
certain way of doing things that we do not even &lt;em&gt;see&lt;/em&gt; how poor our current solution is.&lt;/p&gt;

&lt;p&gt;The following two examples are related to the work done in F# (because this is what
I'm the most familiar with), but you can surely find similar examples in other languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multi-core&lt;/strong&gt; is an easy to see challenge caused by an external development. 
It led to the popularity of &lt;em&gt;immutable&lt;/em&gt; data structures (and functional programming,
in general) and it was also partly motivation for &lt;a href="http://msdn.microsoft.com/en-us/library/dd233250.aspx" title="Asynchronous Workflows (F#)"&gt;asynchronous workflows&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data access&lt;/strong&gt; is a more subtle challenge. Technologies like &lt;a href="http://msdn.microsoft.com/en-us/library/bb397926.aspx" title="LINQ (Language-Integrated Query)"&gt;LINQ&lt;/a&gt; make it
significantly easier, but it was not easy to see that inline SQL was a poor solution.
This is even more the case for F# &lt;em&gt;type providers&lt;/em&gt;. You will not realize how poor the
established data access story is until you &lt;em&gt;see&lt;/em&gt; something like
the &lt;a href="http://www.youtube.com/watch?v=cCuGgA9Yqrs" title="F# R Type Provider Demo"&gt;WorldBank and R provider&lt;/a&gt; or &lt;a href="http://fsharp.github.io/FSharp.Data/library/CsvProvider.html" title="F# Data: CSV type provider"&gt;CSV type provider&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe that the next important practical challenge for programming language designers
is of the kind that is not easy to see - because we are so used to doing things in 
certain ways that we cannot see how poor they are. The problem is designing languages
that are better at working with (and understanding) the &lt;em&gt;context&lt;/em&gt; in which programs are
executed.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advent Art：北斎の絵を生成する</title>
      <guid>http://tomasp.net/blog/2013/japan-advent-art</guid>
      <link>http://tomasp.net/blog/2013/japan-advent-art/index.html</link>
      <pubDate>Tue, 24 Dec 2013 03:58:37 GMT</pubDate>
      <description>&lt;div id="myModal" class="reveal-modal xlarge" data-reveal&gt;
  &lt;iframe src="http://tomasp.net/blog/2013/japan-advent-art/hokusai.html" style="width:100%; height:850px;border-style:none;"&gt;&lt;/iframe&gt;
  &lt;a class="close-reveal-modal"&gt;&amp;#215;&lt;/a&gt;
&lt;/div&gt;

&lt;div class="rdecor" style="text-align:center"&gt;
&lt;a href="#" data-reveal-id="myModal" style="text-align:center"&gt;
&lt;img src="http://tomasp.net/blog/2013/japan-advent-art/hokusai_sm.jpg" style="margin-bottom:10px;border:4px solid black" title="神奈川沖浪裏 (The Great Wave off Kanagawa)" /&gt;&lt;br /&gt;
&lt;small style="font-size:90%"&gt;実際の結果を見るにはここをクリック！&lt;/small&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;ここ数年、日本のF# コミュニティは「F# Advent Calendar」というイベントを開催しています
(&lt;a href="http://atnd.org/events/10685"&gt;2010年&lt;/a&gt;、
&lt;a href="http://partake.in/events/1c24993a-c475-4fc2-bca4-7a1cd2f81869"&gt;2011年&lt;/a&gt;、
&lt;a href="http://atnd.org/events/33927"&gt;2012年&lt;/a&gt;、
そして &lt;a href="http://connpass.com/event/3935/"&gt;今年&lt;/a&gt;)。
これはadvent dayごとに1人ずつ、F#に関連した何かしら興味深い記事を作成するというものです。
私は去年からTwitterでadvent calendarをチェックしていて、
今年からは私も参加しようと思い、記事を書きたいと申し出ました。
そうしたところ、数名の方からの協力を得ることができました。
&lt;a href="https://twitter.com/igeta"&gt;@igeta&lt;/a&gt; には参加手続きの諸々とレビューを、
&lt;a href="http://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; にはこの記事の翻訳を、そして
&lt;a href="http://twitter.com/gab_km"&gt;@gab_km&lt;/a&gt; には翻訳のレビューをしていただきました。
ありがとう！&lt;/p&gt;

&lt;p&gt;けれども何についての記事を書くのがよいのでしょう？
過去一年にわたって、F#コミュニティで開発されているF#のオープンソースライブラリやプロジェクトを
いくつか紹介できるような記事がよさそうです。
それと同時に、日本に関連のあるトピックが何かないものでしょうか？
少し考えてみたところ、以下のようなプランを思いつきました：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まず、日本の絵画について学ぶために &lt;a href="http://fsharp.github.io/FSharp.Data/"&gt;F# Data&lt;/a&gt; ライブラリと &lt;a href="http://www.freebase.com"&gt;Freebase&lt;/a&gt; を組み合わせて使う。
このライブラリにはいまや &lt;a href="https://github.com/fsharp/FSharp.Data/blob/master/docs/content/ja/index.md"&gt;日本語ドキュメント&lt;/a&gt; があり、作成してくれた &lt;a href="https://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; に感謝しています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そして絵画作品を1つ選択して、F#でその作品を再生成する。
私の絵画スキルでは到底無理なのですが、試してみることはできます :-)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最後に、 &lt;a href="http://funscript.info"&gt;FunScriptプロジェクト&lt;/a&gt; を使って
F#コードをJavaScriptに変換します。
そうすると純粋なHTML Webアプリケーションとして実行できるようになり、
携帯電話やその他のデバイスでも動作するようになります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>The F# Computation Expression Zoo (PADL'14)</title>
      <guid>http://tomasp.net/blog/2013/computation-zoo-padl</guid>
      <link>http://tomasp.net/blog/2013/computation-zoo-padl/index.html</link>
      <pubDate>Fri, 08 Nov 2013 06:42:56 GMT</pubDate>
      <description>&lt;p&gt;F# &lt;a href="http://msdn.microsoft.com/en-us/library/dd233182.aspx"&gt;computation expressions&lt;/a&gt; are the 
syntactic language mechanism that is used by features like sequence expressions and asynchronous
workflows. The aim of F# computation expressions is to provide a &lt;em&gt;single&lt;/em&gt; syntactic mechanism
that provides convenient notation for writing a wide range of computations.&lt;/p&gt;

&lt;p&gt;The syntactic mechanisms that are unified by computation expressions include Haskell &lt;code&gt;do&lt;/code&gt; 
notation and list comprehensions, C# iterators, asynchronous methods and LINQ queries,
Scala &lt;code&gt;for&lt;/code&gt; comprehensions and Python generators to name just a few.&lt;/p&gt;

&lt;p&gt;Some time ago, I started working on an academic article to explain what makes computation
expressions unique - and I think there is quite a few interesting aspects. Sadly, this is 
often not very well explained and so the general preception is more like this...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building great open-source libraries</title>
      <guid>http://tomasp.net/blog/2013/great-open-source</guid>
      <link>http://tomasp.net/blog/2013/great-open-source/index.html</link>
      <pubDate>Thu, 31 Oct 2013 13:29:06 GMT</pubDate>
      <description>&lt;a href="http://tpetricek.github.io/FSharp.Formatting/"&gt;
&lt;img src="http://tpetricek.github.io/FSharp.Formatting/misc/logo.png" alt="F# documentation tools" class="rdecor" style="width:150px;height:150px" /&gt;
&lt;/a&gt;

&lt;p&gt;The hard part about successful open-source development is not putting the first 
version of your source code on GitHub. The hard part is what comes next. First
of all, there are &lt;em&gt;community aspects&lt;/em&gt; - making sure that the project fits well with
other work in the area, engaging the community and contributors, planing future
directions for the project and so on. Secondly, there is an &lt;em&gt;infrastructural side&lt;/em&gt; - 
making sure that there is a package (on &lt;a href="http://www.nuget.org/packages?q=fsharp"&gt;NuGet in the F# world&lt;/a&gt;),
easy to run and useful tests and also up-to-date documentation and tutorials.&lt;/p&gt;

&lt;p&gt;In this article, I want to talk about the &lt;em&gt;infrastructural side&lt;/em&gt;, which is 
easier of the two, but nevertheless, difficult to get right!
Fortunately, the F# community made an amazing progress in this direction, so let's
have a look at some of the tools that make this possible...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How many tuple types are there in C#?</title>
      <guid>http://tomasp.net/blog/2013/tuples-in-csharp</guid>
      <link>http://tomasp.net/blog/2013/tuples-in-csharp/index.html</link>
      <pubDate>Tue, 17 Sep 2013 13:11:57 GMT</pubDate>
      <description>&lt;p&gt;In a &lt;a href="http://stackoverflow.com/questions/18718232/when-should-i-write-my-functions-in-curried-form/18721711"&gt;recent StackOverflow question&lt;/a&gt;
the poster asked about the difference between &lt;em&gt;tupled&lt;/em&gt; and &lt;em&gt;curried&lt;/em&gt; form of a function in F#. 
In F#, you can use pattern matching to easily define a function that takes a tuple as an argument.
For example, the poster's function was a simple calculation that multiplies the number 
of units sold &lt;em&gt;n&lt;/em&gt; by the price &lt;em&gt;p&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="fssnip"&gt;
&lt;span class="l"&gt;1: &lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_1', 1)" onmouseover="showTip(event, 'abs159_1', 1)" class="i"&gt;salesTuple&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs159_2', 2)" onmouseover="showTip(event, 'abs159_2', 2)" class="i"&gt;price&lt;/span&gt;, &lt;span onmouseout="hideTip(event, 'abs159_3', 3)" onmouseover="showTip(event, 'abs159_3', 3)" class="i"&gt;count&lt;/span&gt;) &lt;span class="o"&gt;=&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_2', 4)" onmouseover="showTip(event, 'abs159_2', 4)" class="i"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs159_4', 5)" onmouseover="showTip(event, 'abs159_4', 5)" class="i"&gt;float&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_3', 6)" onmouseover="showTip(event, 'abs159_3', 6)" class="i"&gt;count&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;The function takes a single argument of type &lt;code&gt;Tuple&amp;lt;float, int&amp;gt;&lt;/code&gt; (or, using the nicer F# notation
&lt;code&gt;float * int&lt;/code&gt;) and immediately decomposes it into two variables, &lt;code&gt;price&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;. The other
alternative is to write a function in the &lt;em&gt;curried&lt;/em&gt; form:&lt;/p&gt;
&lt;pre class="fssnip"&gt;
&lt;span class="l"&gt;1: &lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_5', 7)" onmouseover="showTip(event, 'abs159_5', 7)" class="i"&gt;salesCurried&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_2', 8)" onmouseover="showTip(event, 'abs159_2', 8)" class="i"&gt;price&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_3', 9)" onmouseover="showTip(event, 'abs159_3', 9)" class="i"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_2', 10)" onmouseover="showTip(event, 'abs159_2', 10)" class="i"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs159_4', 11)" onmouseover="showTip(event, 'abs159_4', 11)" class="i"&gt;float&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_3', 12)" onmouseover="showTip(event, 'abs159_3', 12)" class="i"&gt;count&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;Here, we get a function of type &lt;code&gt;float -&amp;gt; int -&amp;gt; float&lt;/code&gt;. Usually, you can read this just as a 
function that takes &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; and returns &lt;code&gt;float&lt;/code&gt;. However, you can also use &lt;em&gt;partial
function application&lt;/em&gt; and call the function with just a single argument - if the price of
an apple is $1.20, we can write &lt;code&gt;salesCurried 1.20&lt;/code&gt; to get a &lt;em&gt;new&lt;/em&gt; function that takes just
&lt;code&gt;int&lt;/code&gt; and gives us the price of specified number of apples. The poster's question was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So when I want to implement a function that would have taken &lt;em&gt;n &gt; 1&lt;/em&gt; arguments, 
should I for example always use a curried function in F# (...)? Or should I take 
the simple route and use regular function with an n-tuple and curry later on 
if necessary?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see &lt;a href="http://stackoverflow.com/questions/18718232/when-should-i-write-my-functions-in-curried-form/18721711#18721711"&gt;my answer on StackOverflow&lt;/a&gt;.
The point of this short introduction was that the question inspired me to think about how
the world looks from the C# perspective...&lt;/p&gt;

&lt;div class="tip" id="abs159_1"&gt;val salesTuple : price:float * count:int -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Tuples-in-csharp_.salesTuple&lt;/div&gt;
&lt;div class="tip" id="abs159_2"&gt;val price : float&lt;/div&gt;
&lt;div class="tip" id="abs159_3"&gt;val count : int&lt;/div&gt;
&lt;div class="tip" id="abs159_4"&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = System.Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class="tip" id="abs159_5"&gt;val salesCurried : price:float -&amp;gt; count:int -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Tuples-in-csharp_.salesCurried&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Hello New York. Learn some F#!</title>
      <guid>http://tomasp.net/blog/2013/fsharp-new-york</guid>
      <link>http://tomasp.net/blog/2013/fsharp-new-york/index.html</link>
      <pubDate>Thu, 29 Aug 2013 13:02:06 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2013/fsharp-new-york/nyc.jpg" class="rdecor" title="I'm cheating a little - the photo is from my previous visit in April." style="margin-left:20px;margin-bottom:15px"/&gt;

&lt;p&gt;Exactly two weeks ago, I started a three month internship at BlueMountain Capital in New York.
They have a &lt;a href="http://techblog.bluemountaincapital.com/"&gt;technical blog&lt;/a&gt; and should be well known to the
F# community thanks to the &lt;a href="https://github.com/BlueMountainCapital/FSharpRProvider"&gt;R type provider&lt;/a&gt;
which was written by Howard Mansell (&lt;a href="https://twitter.com/hmansell"&gt;@hmansell&lt;/a&gt;).
I'll have the pleasure of working with Howard on some more open source data-science related tools for F#
(and C#). I'll write more about these when we have something to share, but if you want to
contribute and help us, join the Data and Machine Learning &lt;a href="http://fsharp.org/technical-groups/"&gt;working group at F# Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aside from my work, I'm also happy to get involved with the great F# community in New York!
We already have some events planned - &lt;strong&gt;Progressive F# Tutorials&lt;/strong&gt; and &lt;strong&gt;FastTrack to F#&lt;/strong&gt; are
scheduled for September 16.-19. so you can become an F# guru in 4 days :-). But I'm also happy
to have a chat with anyone interested in F# and perhaps do a lunch time talk, if you need to
convince your colleagues or boss that F# is a good choice.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Update on the F# Deep Dives book</title>
      <guid>http://tomasp.net/blog/2013/deep-dives-update</guid>
      <link>http://tomasp.net/blog/2013/deep-dives-update/index.html</link>
      <pubDate>Tue, 27 Aug 2013 03:15:40 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/articles/manning-deep-dives/cover.jpg" class="rdecor" title="F# Deep Dives" style="margin-left:20px;margin-bottom:15px"/&gt;

&lt;p&gt;It has been some time since I &lt;a href="http://tomasp.net/blog/manning-deep-dives.aspx/"&gt;last wrote about F# Deep Dives&lt;/a&gt;
- a new project that I'm working on together with &lt;a href="http://www.manning.com"&gt;Manning&lt;/a&gt;,
&lt;a href="http://trelford.com/blog"&gt;Phil Trelford&lt;/a&gt; and a number of F# experts, so I'd like to write a quick
update. In summary, working on a book with more than 10 co-authors is more difficult than one
would think (and 10 people cannot write a book in 1/10 of the time :-)), but now that the holidays
are almost over, you can expect more frequent updates again!&lt;/p&gt;

&lt;p&gt;First of all, I shoud mention that you can buy &lt;a href="http://www.manning.com/petricek2/"&gt;the Early Access preview&lt;/a&gt;
of the book from Manning and there is already one &lt;a href="http://blogs.tedneward.com/2013/01/05/Review+In+Advance+F+Deep+Dives.aspx"&gt;in advance review of the book&lt;/a&gt;
from Ted Neward (thanks!) who says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As of this writing, the early-access [...] version had only Chapters 3 and Chapter 11, 
but the other topics [...] are juicy and meaty. [T]he prose from the MEAP edition is 
pretty easy to read already, despite the fact that it's early-access material. In particular, 
the Markdown parser they implement in chapter 3 is a great example of a non-trivial 
language parser, which is not an easy task (...).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I mentioned, the book is unique in that it is not written just by me and Phil - each chapter 
is written by a real-world F# expert and many of them use F# in production. The disadvantage is
that they are all busy people, but we have close to half of the planned chapters available already...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Power of mathematics: Reasoning about functional types</title>
      <guid>http://tomasp.net/blog/types-and-math.aspx</guid>
      <link>http://tomasp.net/blog/types-and-math.aspx/index.html</link>
      <pubDate>Tue, 14 May 2013 16:54:00 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/articles/types-and-maths/distributivity.png" class="rdecor" /&gt;

&lt;p&gt;One of the most amazing aspects of mathematics is that it applies to such a wide range 
of areas. The same mathematical rules can be applied to completely different objects 
(say, forces in physics or markets in economics) and they work exactly the same way.&lt;/p&gt;

&lt;p&gt;In this article, we'll look at one such fascinating use of mathematics - we'll use 
elementary school algebra to reason about functional data types.&lt;/p&gt;

&lt;p&gt;In functional programming, the best way to start solving a problem is to think about
the data types that are needed to represent the data that you will be working with.
This gives you a simple starting point and a great tool to communicate and
develop your ideas. I call this approach &lt;a href="http://tomasp.net/blog/type-first-development.aspx"&gt;Type-First Development and I wrote about
it earlier&lt;/a&gt;, so I won't repeat
that here.&lt;/p&gt;

&lt;p&gt;The two most elementary types in functional languages are &lt;em&gt;tuples&lt;/em&gt; (also called pairs 
or product types) and &lt;em&gt;discriminated unions&lt;/em&gt; (also called algebraic data types, case 
classes or sum types). It turns out that these two types are closely related to 
&lt;em&gt;multiplication&lt;/em&gt; and &lt;em&gt;addition&lt;/em&gt; in algebra...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Async in C# and F#: Asynchronous gotchas in C#</title>
      <guid>http://tomasp.net/blog/csharp-async-gotchas.aspx</guid>
      <link>http://tomasp.net/blog/csharp-async-gotchas.aspx/index.html</link>
      <pubDate>Mon, 15 Apr 2013 03:00:03 GMT</pubDate>
      <description>&lt;p&gt;Back in February, I attended the annual MVP summit - an &lt;a href="http://www.2013mvpsummit.com/about"&gt;event organized by Microsoft
for MVPs&lt;/a&gt;. I used that opportunity to also visit
Boston and New York and do two F# talks and to record a &lt;a href="http://channel9.msdn.com/posts/Tomas-Petricek-How-F-Learned-to-Stop-Worrying-and-Love-the-Data" title="Tomas Petricek (Channel 9): How F# Learned to Stop Worrying and Love the Data"&gt;Channel9 lecutre about type
providers&lt;/a&gt;.
Despite all the &lt;em&gt;other activities&lt;/em&gt; (often involving pubs, other F# people and long 
sleeping in the mornings), I also managed to come to some talks!&lt;/p&gt;

&lt;div style="margin-left:auto;margin-right:auto;width:379px;margin-top:10px;margin-bottom:20px;"&gt;
&lt;img src="http://tomasp.net/articles/csharp-async-gotchas/async-clinic.png" style="width:379px;" /&gt;
&lt;/div&gt;

&lt;p&gt;One (non-NDA) talk was the &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2013/02/20/mvp-summit-presentation-on-async.aspx" title="Lucian Wischik, Stephen Toub: Async Clinic"&gt;Async Clinic&lt;/a&gt; talk about the new &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords 
in C# 5.0. Lucian and Stephen talked about common problems that C# developers face when 
writing asynchronous programs. In this blog post, I'll look at some of the problems from 
the F# perspective. The talk was quite lively, and someone recorded the reaction of the 
F# part of the audience as follows...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>F# Data: New type provider library</title>
      <guid>http://tomasp.net/blog/fsharp-data.aspx</guid>
      <link>http://tomasp.net/blog/fsharp-data.aspx/index.html</link>
      <pubDate>Thu, 28 Mar 2013 03:23:41 GMT</pubDate>
      <description>&lt;img src="https://raw.github.com/fsharp/FSharp.Data/master/misc/logo.png" class="rdecor" style="width:120px;height:120px;" /&gt;

&lt;p&gt;When F# 3.0 type providers were still in beta version, I wrote a couple of type 
providers as examples for talks. These included the WorldBank type provider
(now available &lt;a href="http://www.tryfsharp.org"&gt;on Try F#&lt;/a&gt;) and also type provider for
XML that infered the structure from sample. &lt;br /&gt;
For some time, these were hosted as part of &lt;a href="https://github.com/fsharp/fsharpx/"&gt;FSharpX&lt;/a&gt; 
and the authors of FSharpX also added a number of great features.&lt;/p&gt;

&lt;p&gt;When I found some more time earlier this year, I decided to start a new library
that would be fully focused on data access in F# and on type providers and
I started working on &lt;strong&gt;F# Data&lt;/strong&gt;. The library has now reached a stable state
and &lt;a href="http://www.navision-blog.de/blog/2013/03/27/fsharpx-1-8-removes-support-for-document-type-provider/"&gt;Steffen also announced&lt;/a&gt; 
that the document type providers (JSON, XML and CSV) are not going to be available
in FSharpX since the next version.&lt;/p&gt;

&lt;p&gt;This means that if you're interested in accessing data using F# type providers, 
you should now go to F# Data. Here are the most important links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fsharp/FSharp.Data"&gt;F# Data source code on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fsharp.github.com/FSharp.Data/"&gt;F# Data documentation &amp;amp; tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nuget.org/packages/FSharp.Data"&gt;F# Data on NuGet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before looking at the details, I would like to thank to &lt;a href="https://github.com/ovatsus"&gt;Gustavo Guerra&lt;/a&gt;
who made some amazing contributions to the library! (More contributors are always welcome,
so continue reading if you're interested...)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Upcoming F# talks and trainings (London, NYC &amp; Boston)</title>
      <guid>http://tomasp.net/blog/events-winter-2013.aspx</guid>
      <link>http://tomasp.net/blog/events-winter-2013.aspx/index.html</link>
      <pubDate>Thu, 07 Feb 2013 23:00:22 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/articles/events-winter-2013/mvplogo.png" class="rdecor" title="Tomas Petricek" style="margin:10px 35px 15px 35px;width:100px"/&gt;

&lt;p&gt;After a few years, I finally managed to find the time to attend the 
  &lt;a href="http://www.2013mvpsummit.com/"&gt;MVP Summit&lt;/a&gt; this year. The Summit is
  an annual event where people who are active in Microsoft technical communities come
  to the Microsoft headquarters to learn about new things (and, of course, tell them 
  how they should be doing their job :-)). The Summit is a great place to meet interesting
  people (so if you're reading this and will be there, definitely get in touch!)
&lt;/p&gt;

&lt;p&gt;The good news - for those interested in F# - is that I'll be doing two F# talks 
  on the way. I'll stop in &lt;strong&gt;Boston&lt;/strong&gt; on &lt;strong&gt;February 13&lt;/strong&gt; and then in &lt;strong&gt;New York&lt;/strong&gt; on &lt;strong&gt;February 25&lt;/strong&gt;.
  I'll be talking about different topics (Google tells me that the distance is 
  &lt;em&gt;only&lt;/em&gt; 216 miles!)
&lt;/p&gt;</description>
    </item>
    <item>
      <title>Announcing: Literate programming tools for F#</title>
      <guid>http://tomasp.net/blog/fsharp-literate-programming.aspx</guid>
      <link>http://tomasp.net/blog/fsharp-literate-programming.aspx/index.html</link>
      <pubDate>Tue, 22 Jan 2013 17:35:36 GMT</pubDate>
      <description>&lt;img src="https://raw.github.com/tpetricek/FSharp.Formatting/master/docs/misc/logo.png" class="rdecor" style="width:120px;height:120px;" /&gt;

&lt;p&gt;For some time now, I've been writing my F# blog posts (and other F# articles 
published elsewhere) by combining F# code snippets and Markdown formatting. In fact,
I even wrote a Markdown parser in F# so that I can post-process documents (to 
generate references etc). You can read about the Markdown parser in an upcoming
&lt;a href="http://manning.com/petricek2/"&gt;F# Deep Dives&lt;/a&gt; book - currently, it is available 
as a free chapter!&lt;/p&gt;

&lt;p&gt;During the Christmas break, I finally found enough time to clean-up the code I
was using and package it properly into a documented library that is easy to install and use.
Here are the most important links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tpetricek.github.com/FSharp.Formatting"&gt;F# Formatting home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpetricek/FSharp.Formatting"&gt;F# Formatting source code&lt;/a&gt; on GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nuget.org/packages/FSharp.Formatting"&gt;F# Formatting package&lt;/a&gt; on NuGet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about this tool and how to use it, &lt;a href="http://tomasp.net/blog/fsharp-literate-programming.aspx"&gt;continue reading&lt;/a&gt;!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Processing trees with F# zipper computation</title>
      <guid>http://tomasp.net/blog/tree-zipper-query.aspx</guid>
      <link>http://tomasp.net/blog/tree-zipper-query.aspx/index.html</link>
      <pubDate>Wed, 19 Dec 2012 14:22:47 GMT</pubDate>
      <description>&lt;p&gt;One of the less frequently advertised new features in F# 3.0 is the &lt;em&gt;query syntax&lt;/em&gt;.
It is an extension that makes it possible to add custom operations in an F#
computation expression. The standard &lt;code&gt;query { .. }&lt;/code&gt; computation uses this to define
operations such as sorting (&lt;code&gt;sortBy&lt;/code&gt; and &lt;code&gt;sortByDescending&lt;/code&gt;) or operations for taking
and skipping elements (&lt;code&gt;take&lt;/code&gt;, &lt;code&gt;takeWhile&lt;/code&gt;, ...). For example, you can write:&lt;/p&gt;
&lt;pre class="fssnip"&gt;
&lt;span class="l"&gt;1: &lt;/span&gt;&lt;span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i"&gt;query&lt;/span&gt; { &lt;span class="k"&gt;for&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="l"&gt;2: &lt;/span&gt;        &lt;span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="k"&gt;take&lt;/span&gt; &lt;span class="n"&gt;3&lt;/span&gt;
&lt;span class="l"&gt;3: &lt;/span&gt;        &lt;span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="k"&gt;sortByDescending&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="i"&gt;x&lt;/span&gt; }&lt;/pre&gt;
&lt;p&gt;In this article I'll use the same notation for processing trees using the &lt;em&gt;zipper&lt;/em&gt;
pattern. I'll show how to define a computation that allows you to traverse a tree
and perform transformations on (parts) of the tree. For example, we'll be able to 
say "Go to the left sub-tree, multiply all values by 2. Then go back and to the
right sub-tree and divide all values by 2" as follows:&lt;/p&gt;
&lt;pre class="fssnip"&gt;
&lt;span class="l"&gt;1: &lt;/span&gt;&lt;span onmouseout="hideTip(event, 'fsd1', 1)" onmouseover="showTip(event, 'fsd1', 1)" class="i"&gt;tree&lt;/span&gt; { &lt;span class="k"&gt;for&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'fsd2', 2)" onmouseover="showTip(event, 'fsd2', 2)" class="i"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="i"&gt;sample&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="l"&gt;2: &lt;/span&gt;       &lt;span onmouseout="hideTip(event, 'fsd3', 3)" onmouseover="showTip(event, 'fsd3', 3)" class="k"&gt;left&lt;/span&gt; 
&lt;span class="l"&gt;3: &lt;/span&gt;       &lt;span onmouseout="hideTip(event, 'fsd4', 4)" onmouseover="showTip(event, 'fsd4', 4)" class="k"&gt;map&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'fsd2', 5)" onmouseover="showTip(event, 'fsd2', 5)" class="i"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;2&lt;/span&gt;) 
&lt;span class="l"&gt;4: &lt;/span&gt;       &lt;span onmouseout="hideTip(event, 'fsd5', 6)" onmouseover="showTip(event, 'fsd5', 6)" class="k"&gt;up&lt;/span&gt;
&lt;span class="l"&gt;5: &lt;/span&gt;       &lt;span onmouseout="hideTip(event, 'fsd6', 7)" onmouseover="showTip(event, 'fsd6', 7)" class="k"&gt;right&lt;/span&gt;
&lt;span class="l"&gt;6: &lt;/span&gt;       &lt;span onmouseout="hideTip(event, 'fsd4', 8)" onmouseover="showTip(event, 'fsd4', 8)" class="k"&gt;map&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'fsd2', 9)" onmouseover="showTip(event, 'fsd2', 9)" class="i"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;2&lt;/span&gt;) 
&lt;span class="l"&gt;7: &lt;/span&gt;       &lt;span onmouseout="hideTip(event, 'fsd7', 10)" onmouseover="showTip(event, 'fsd7', 10)" class="k"&gt;top&lt;/span&gt; }&lt;/pre&gt;
&lt;p&gt;This example behaves quite differently to the usual &lt;code&gt;query&lt;/code&gt; computation. It mostly
relies on custom operations like &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;up&lt;/code&gt; that allow us to navigate
through a tree (descend along the left or right sub-tree, go back to the parent node). 
The only operation that &lt;em&gt;does something&lt;/em&gt; is the &lt;code&gt;map&lt;/code&gt; operation which transforms the
current sub-tree.&lt;/p&gt;

&lt;p&gt;This was just a brief introduction to what is possible, so let's take a detailed look
at how this works...&lt;/p&gt;

&lt;div class="tip" id="fs1"&gt;val query : Linq.QueryBuilder&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.query&lt;/div&gt;
&lt;div class="tip" id="fs2"&gt;val x : int&lt;/div&gt;
&lt;div class="tip" id="fs3"&gt;custom operation: take (int)&lt;br /&gt;&lt;br /&gt;Calls Linq.QueryBuilder.Take &lt;/div&gt;
&lt;div class="tip" id="fs4"&gt;custom operation: sortByDescending (&amp;#39;Key)&lt;br /&gt;&lt;br /&gt;Calls Linq.QueryBuilder.SortByDescending &lt;/div&gt;
&lt;div class="tip" id="fsd1"&gt;val tree : TreeZipperBuilder&lt;br /&gt;&lt;br /&gt;Full name: Tree-zipper-query.aspx_.tree&lt;br /&gt;&lt;em&gt;&lt;br /&gt;&lt;br /&gt;&amp;#160;Global instance of the computation builder&lt;/em&gt;&lt;/div&gt;
&lt;div class="tip" id="fsd2"&gt;val x : int&lt;/div&gt;
&lt;div class="tip" id="fsd3"&gt;custom operation: left&lt;br /&gt;&lt;br /&gt;Calls TreeZipperBuilder.Left &lt;/div&gt;
&lt;div class="tip" id="fsd4"&gt;custom operation: map (&amp;#39;a)&lt;br /&gt;&lt;br /&gt;Calls TreeZipperBuilder.Select &lt;br /&gt;&lt;em&gt;&lt;br /&gt;&lt;br /&gt;&amp;#160;Transform the current sub-tree using &amp;#39;f&amp;#39;&lt;/em&gt;&lt;/div&gt;
&lt;div class="tip" id="fsd5"&gt;custom operation: up&lt;br /&gt;&lt;br /&gt;Calls TreeZipperBuilder.Up &lt;/div&gt;
&lt;div class="tip" id="fsd6"&gt;custom operation: right&lt;br /&gt;&lt;br /&gt;Calls TreeZipperBuilder.Right &lt;/div&gt;
&lt;div class="tip" id="fsd7"&gt;custom operation: top&lt;br /&gt;&lt;br /&gt;Calls TreeZipperBuilder.Top &lt;/div&gt;
</description>
    </item>
    <item>
      <title>Manning: F# Deep Dives deal of the day</title>
      <guid>http://tomasp.net/blog/manning-deep-dives.aspx</guid>
      <link>http://tomasp.net/blog/manning-deep-dives.aspx/index.html</link>
      <pubDate>Tue, 18 Dec 2012 17:19:57 GMT</pubDate>
      <description>
&lt;img src="http://tomasp.net/articles/manning-deep-dives/cover.jpg" class="rdecor" title="F# Deep Dives" style="margin-bottom:15px"/&gt;

&lt;p&gt;
  The F# language has been around for longer than many people suspect. My &lt;a href="http://tomasp.net/blog/fsquotations.aspx"&gt;first, completely outdated,
  blog post&lt;/a&gt; was from May 2006. The Microsoft Research releases, sometime around 2006 were the
  first stable versions that gained some interest and slowly attracted commercial users.
&lt;/p&gt;

&lt;p&gt;A lot has changed since the early days. F# now includes powerful features like &lt;em&gt;computation expressions&lt;/em&gt;
  and &lt;em&gt;asynchronous workflows&lt;/em&gt; and F# 3.0 comes with unique &lt;em&gt;type provider&lt;/em&gt; mechanism.
&lt;/p&gt;

&lt;p&gt;There is an increasing number of users from diverse domains: F# is used to model complex domains
  in &lt;a href="http://techmeshconf.com/dl/techmesh-london-2012/slides/TobiasGedell_EdenAnFWPFFrameworkForBuildingGUITools.pdf"&gt;finance&lt;/a&gt; and science; asynchronous and concurrent features are used to write server-side components
  of &lt;a href="http://theburningmonk.com/"&gt;social games&lt;/a&gt; and &lt;a href="http://www.infoq.com/interviews/trelford-functional"&gt;trading systems&lt;/a&gt;,
  but also in &lt;a href="http://techmeshconf.com/dl/techmesh-london-2012/slides/AdamGranicz_DevelopingAndIntegratingWebSharperApplicationsWithFacebook.pdf"&gt;web programming&lt;/a&gt;;
  the expressivity of F# is used by machine learning experts to
  handle dirty data or &lt;a href="http://www.dotnetrocks.com/default.aspx?showNum=293"&gt;classify XBox players&lt;/a&gt;. Moreover, the &lt;a href="http://fsharp.org"&gt;F# Software Foundation&lt;/a&gt;
  has been recently founded to support the collaboration between different commercial users, open-source 
  community and academia.
&lt;/p&gt;

&lt;p&gt;There is an increasing interest in F#, but many of those who approach it ask (excellent) questions such as:
  &lt;em&gt;"In what problem domains can I benefit from F#?"&lt;/em&gt; or &lt;em&gt;"How do I use F# in finance/science/gaming or web programming?"&lt;/em&gt;
  and most importantly &lt;em&gt;"How do I approach different problems in F#?"&lt;/em&gt;
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Learn F# at TechMesh and SkillsMetter</title>
      <guid>http://tomasp.net/blog/more-events-autumn-2012.aspx</guid>
      <link>http://tomasp.net/blog/more-events-autumn-2012.aspx/index.html</link>
      <pubDate>Sun, 21 Oct 2012 15:53:04 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/articles/more-events-autumn-2012/tomas-qcon.jpg" class="rdecor" title="Tomas Petricek" style="margin-bottom:15px"/&gt;

&lt;p&gt;Autumn is a busy period and I already invited you to a 
  &lt;a href="http://tomasp.net/blog/events-autumn-2012.aspx"&gt;couple of interesting events&lt;/a&gt;, 
  but there are two more events that you definitely should not miss.
  In only two weeks, you can come to two-day &lt;a href="http://skillsmatter.com/event/scala/progfsharp-2012"&gt;Progressive F# Tutorials&lt;/a&gt;
  packed with tutorials for both F# beginners and experts. At the beginning of December,
  the &lt;a href="http://techmeshconf.com/"&gt;TechMesh Conference&lt;/a&gt; comes with three days of
  talks about alternative (and future) technologies.
&lt;/p&gt;

&lt;p&gt;I'll be speaking at both Progressive F# Tutorials and TechMesh and I'm also doing a tutorial
  at TechMesh, so if you want to learn about F#, type providers in F# 3.0 and financial computing
  with F#, here are some talks that you should not miss...
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Applicative functors: definition and syntax</title>
      <guid>http://tomasp.net/blog/applicative-functors.aspx</guid>
      <link>http://tomasp.net/blog/applicative-functors.aspx/index.html</link>
      <pubDate>Tue, 21 Aug 2012 13:23:19 GMT</pubDate>
      <description>&lt;p&gt;In a recent blog post, &lt;a href="http://blog.ezyang.com/2012/08/applicative-functors/" title="Edward Z. Yang: Applicative functors"&gt;Edward Z. Yang talks about applicative functors&lt;/a&gt;. 
He mentions two equivalent definitions of applicative functors - the standard
definition used in Haskell libraries (&lt;code&gt;Applicative&lt;/code&gt;) and an alternative that
has been also presented in the &lt;a href="http://www.soi.city.ac.uk/~ross/papers/Applicative.html" title="C. McBride and R. Paterson: Applicative Programming with Effects"&gt;original paper&lt;/a&gt;, but is generally less
familiar (&lt;code&gt;Monoidal&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The standard definition makes a perfect sense with the standard uses in Haskell,
however I always preferred the alternative definition. Edward uses the alternative
(&lt;code&gt;Monoidal&lt;/code&gt;) definition to explain the laws that should hold about applicative 
functors and to explain &lt;em&gt;commutative&lt;/em&gt; applicative functors, but I think it
is even more useful.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Monoidal&lt;/code&gt; definition fits nicely with a trick that you can use to 
&lt;a href="http://tomasp.net/blog/idioms-in-linq.aspx" title="T. Petricek: Beyond the Monad fashion (I.): Writing idioms in LINQ"&gt;encode applicative functors in C# using LINQ&lt;/a&gt; and I also used it as 
a basis for an F# syntax extension that allows writing code using applicative 
functors in a similar style as using monads (which is discussed in my draft 
paper about &lt;a href="http://www.cl.cam.ac.uk/~tp322/papers/notations.html" title="T. Petricek and D. Syme: Syntax Matters: Writing abstract computations in F#"&gt;writing abstract computations in F#&lt;/a&gt;). And I also think that
&lt;em&gt;commutative&lt;/em&gt; applicative functors deserve more attention.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why type-first development matters</title>
      <guid>http://tomasp.net/blog/type-first-development.aspx</guid>
      <link>http://tomasp.net/blog/type-first-development.aspx/index.html</link>
      <pubDate>Wed, 15 Aug 2012 23:21:21 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/articles/type-first-development/tfd.png" class="rdecor" /&gt;

&lt;p&gt;Using functional programming language changes the way you write code in a number
of ways. Many of the changes are at a &lt;em&gt;small-scale&lt;/em&gt;. For example, you learn how to express 
computations in a shorter, more declarative way using higher-order functions.
However, there are also many changes at a &lt;em&gt;large-scale&lt;/em&gt;. The most notable one
is that, when designing a program, you start thinking about the (data) types 
that represent the data your code works with.&lt;/p&gt;

&lt;p&gt;In this article, I describe this approach. Since the acronym TDD is already taken,
I call the approach Type-First Development (TFD), which is probably a better name anyway.
The development is not &lt;em&gt;driven&lt;/em&gt; by types. It &lt;em&gt;starts&lt;/em&gt; with types, but the rest of the
implementation can still use test-driven development for the implementation.&lt;/p&gt;

&lt;p&gt;This article demonstrates the approach using a case study from a real life: 
My example is a project that I started working on with a friend who needed a 
system to log journeys with a company car (for expense reports). Using the 
type-first approach made it easier to understand and discuss the problem.&lt;/p&gt;

&lt;p&gt;In many ways, TFD is a very simple approach, so this article just gives a name
to a practice that is quite common among functional and F# programmers (and 
we have been &lt;a href="http://functional-programming.net/courses/"&gt;teaching it at our F# trainings&lt;/a&gt; for the last year)...&lt;/p&gt;</description>
    </item>
    <item>
      <title>F# Courses and Talks for Autumn 2012 (I.)</title>
      <guid>http://tomasp.net/blog/events-autumn-2012.aspx</guid>
      <link>http://tomasp.net/blog/events-autumn-2012.aspx/index.html</link>
      <pubDate>Wed, 08 Aug 2012 02:47:08 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/articles/events-autumn-2012/tomas.jpg" class="rdecor" title="Tomas Petricek" style="margin-bottom:15px"/&gt;

&lt;p&gt;Similarly to the &lt;a href="http://tomasp.net/blog/fsharp-autumn-2011.aspx"&gt;last year&lt;/a&gt;,
  I already have a number of F# events planned for the end of the summer and autumn that 
  I'd like to invite you to!&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www.infoq.com/news/2012/08/VS2012-Live"&gt;Visual Studio 2012 has been completed&lt;/a&gt;
  recently and it comes with F# 3.0. For me, this means two things. Firstly, it is the second
  Visual Studio version of F#, which means that functional programming is worth taking seriously.
  Secondly, F# 3.0 comes with &lt;em&gt;type providers&lt;/em&gt;, which is a killer feature for working with
  data. No matter if you're a C# programmer now to functional programming or if you're an F#
  user in the real-world, I hope you can find some interesting and useful event below!
&lt;/p&gt;

&lt;p&gt;The two main things that I'm going to be involved in are SkilsMatter trainings in London and New York
  and a few events at the biggest functional conference (ICFP) in Copenhagen...&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>